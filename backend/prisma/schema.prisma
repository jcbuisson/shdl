generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url = env("DATABASE_URL")
}


//////////////        META-DATA FOR ALL ELEMENTS OF ALL BUSINESS MODELS        //////////////

model metadata {
   uid                     String     @unique  // `uid` is unique across models
   created_at              DateTime?
   updated_at              DateTime?
   deleted_at              DateTime?
}

//////////////        BUSINESS MODELS        //////////////

enum Tab {
   users        // users management
   groups       // groups management
   shdl_tests   // SHDL tests management
   craps_tests  // CRAPS tests management
   followup     // students followup
   workshop     // workshop for shdl, craps, text document
}

model user {
   uid                     String     @unique
   email                   String?    @unique(map: "user_sub_unique")
   password                String?
   firstname               String?
   lastname                String?
   pict                    String     @default("/static/img/avatar.svg")
   notes                   String?

   user_tab_relations      user_tab_relation[]
   user_group_relations    user_group_relation[]
   user_slot_excuses       user_slot_excuse[]
}

model user_tab_relation {
   uid                     String     @unique
   user_uid                String
   tab                     Tab

   user                    user @relation(fields: [user_uid], references: [uid], onDelete: Cascade, onUpdate: NoAction)
   @@unique([user_uid, tab])
}

// 'Enseignants', '1SN24D', '1APP24', 'Binôme X & Y'
model group {
   uid                     String     @unique
   name                    String

   user_group_relations    user_group_relation[]
}

model user_group_relation {
   uid                     String     @unique
   user_uid                String
   group_uid               String

   user user @relation(fields: [user_uid], references: [uid], onDelete: Cascade, onUpdate: NoAction)
   group group @relation(fields: [group_uid], references: [uid], onDelete: Cascade, onUpdate: NoAction)
   @@unique([user_uid, group_uid])
}

// groupe 1SN24D, 2024-12-10T14:00 à 2024-12-10T15:45
model group_slot {
   uid                     String     @unique
   group_uid               String
   name                    String
   start                   DateTime
   end                     DateTime

   user_slot_excuses       user_slot_excuse[]
}

model user_slot_excuse {
   uid                     String     @unique
   user_uid                String
   group_slot_uid          String

   user user @relation(fields: [user_uid], references: [uid], onDelete: Cascade, onUpdate: NoAction)
   group_slot group_slot @relation(fields: [group_slot_uid], references: [uid], onDelete: Cascade, onUpdate: NoAction)
   @@unique([user_uid, group_slot_uid])
}

model shdl_test {
   uid                     String     @unique
   name                    String     // ex: "sequenceur load/store"
   test_statements         String?    // ex: "set rst 1\ncheck a 0"
   memory_contents         String?    // ex: "[{ 0: 0, 1: 0xabc, 2: 123}]"
}

model user_document {
   uid                     String     @unique
   user_uid                String
   type                    String     // 'shdl', 'craps', 'text'
   name                    String
   text                    String
   is_valid                Boolean?   // for shdl/craps documents
   update_count            Int        @default(0)

   user_document_events    user_document_event[]
}

model user_document_event {
   uid                     String     @unique
   document_uid            String
   type                    String     // 'create', 'edit', 'delete', 'pass_test'
   start                   DateTime
   end                     DateTime?

   user_document           user_document   @relation(fields: [document_uid], references: [uid], onDelete: Cascade, onUpdate: NoAction)
}
